How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    By seeing what had changed from one version of the file to the next,
    it was easy to spot the parts that could potentially be causing
    problems.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It would allow me to keep working features in place, allowing me to go back
    to any point in history and compare files should anything go awry.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros of Git:
    Developer decides when changes are pushed.
    Finer control over commits.

    Cons:
    Not pushing regularly can lead to gaps in file history.

    Rule: 1 change - 1 commit.


Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    In typical software projects, a single change or new feature can affect many
    files - a document is a single entity.

How can you use the commands git log and git diff to view the history of files?

    git log shows all the changes that have happened over the life of a repo.
    git diff can show us the differences between two commits.
    git log --stat show statistics
    git config --global color.ui auto -> coloured diffs and logs

How might using version control make you more confident to make changes that
could break something?

    Working versions of the code are easily restored, allow for exploration and
    completely rethinking parts of the design without fear of breaking the
    code base.q

Now that you have your workspace set up, what do you want to try using Git for?

    To improve the quality and efficiency of my code and documentation.
